I'll create the CLI tools for your social media automation system 

## 📋 Execution Plan for CLI Tools

**What we're building:**
1. Main CLI entry point with command structure
2. Interactive configuration wizard
3. Deployment and management commands
4. Real-time monitoring capabilities
5. Database migration tools

Let me create these components systematically:

<artifact identifier="cli-main" type="application/vnd.ant.code" language="typescript" title="CLI Main Entry Point and Core Commands">
#!/usr/bin/env node

import { Command } from 'commander';
import chalk from 'chalk';
import inquirer from 'inquirer';
import ora from 'ora';
import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import cron from 'node-cron';
import fs from 'fs-extra';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

config();

const execAsync = promisify(exec);
const program = new Command();

// ================== Configuration Management ==================

interface CLIConfig {
  supabaseUrl?: string;
  supabaseKey?: string;
  openaiKey?: string;
  claudeKey?: string;
  perplexityKey?: string;
  platforms: {
    twitter?: { apiKey: string; apiSecret: string; accessToken: string; accessSecret: string };
    linkedin?: { clientId: string; clientSecret: string; accessToken: string };
    instagram?: { accessToken: string; businessAccountId: string };
  };
  scheduling: {
    researchInterval: string;
    postingSchedule: string[];
  };
}

class ConfigManager {
  private configPath = path.join(process.cwd(), '.social-automation', 'config.json');

  async load(): Promise<CLIConfig> {
    try {
      await fs.ensureDir(path.dirname(this.configPath));
      if (await fs.pathExists(this.configPath)) {
        return await fs.readJson(this.configPath);
      }
      return { platforms: {}, scheduling: { researchInterval: '0 */6 * * *', postingSchedule: [] } };
    } catch (error) {
      console.error(chalk.red('Error loading config:'), error);
      return { platforms: {}, scheduling: { researchInterval: '0 */6 * * *', postingSchedule: [] } };
    }
  }

  async save(config: CLIConfig): Promise<void> {
    await fs.ensureDir(path.dirname(this.configPath));
    await fs.writeJson(this.configPath, config, { spaces: 2 });
  }

  async update(updates: Partial<CLIConfig>): Promise<void> {
    const current = await this.load();
    await this.save({ ...current, ...updates });
  }
}

const configManager = new ConfigManager();

// ================== Setup Command ==================

program
  .command('setup')
  .description('Interactive setup wizard for social media automation')
  .action(async () => {
    console.log(chalk.cyan('\n🚀 Social Media Automation Setup Wizard\n'));

    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'supabaseUrl',
        message: 'Enter your Supabase project URL:',
        validate: (input) => input.length > 0 || 'Supabase URL is required',
      },
      {
        type: 'password',
        name: 'supabaseKey',
        message: 'Enter your Supabase anon key:',
        mask: '*',
        validate: (input) => input.length > 0 || 'Supabase key is required',
      },
      {
        type: 'checkbox',
        name: 'aiProviders',
        message: 'Select AI providers to configure:',
        choices: [
          { name: 'OpenAI', value: 'openai' },
          { name: 'Claude (Anthropic)', value: 'claude' },
          { name: 'Perplexity', value: 'perplexity' },
        ],
      },
      {
        type: 'checkbox',
        name: 'platforms',
        message: 'Select social media platforms to configure:',
        choices: [
          { name: 'Twitter/X', value: 'twitter' },
          { name: 'LinkedIn', value: 'linkedin' },
          { name: 'Instagram', value: 'instagram' },
        ],
      },
    ]);

    const config: CLIConfig = {
      supabaseUrl: answers.supabaseUrl,
      supabaseKey: answers.supabaseKey,
      platforms: {},
      scheduling: {
        researchInterval: '0 */6 * * *',
        postingSchedule: ['9:00', '12:00', '15:00', '18:00'],
      },
    };

    // Configure AI providers
    for (const provider of answers.aiProviders) {
      const aiAnswers = await inquirer.prompt([
        {
          type: 'password',
          name: 'apiKey',
          message: `Enter your ${provider} API key:`,
          mask: '*',
        },
      ]);

      if (provider === 'openai') config.openaiKey = aiAnswers.apiKey;
      if (provider === 'claude') config.claudeKey = aiAnswers.apiKey;
      if (provider === 'perplexity') config.perplexityKey = aiAnswers.apiKey;
    }

    // Configure social platforms
    for (const platform of answers.platforms) {
      console.log(chalk.yellow(`\nConfiguring ${platform}...`));
      
      if (platform === 'twitter') {
        const twitterAnswers = await inquirer.prompt([
          { type: 'password', name: 'apiKey', message: 'API Key:', mask: '*' },
          { type: 'password', name: 'apiSecret', message: 'API Secret:', mask: '*' },
          { type: 'password', name: 'accessToken', message: 'Access Token:', mask: '*' },
          { type: 'password', name: 'accessSecret', message: 'Access Token Secret:', mask: '*' },
        ]);
        config.platforms.twitter = twitterAnswers;
      }

      if (platform === 'linkedin') {
        const linkedinAnswers = await inquirer.prompt([
          { type: 'input', name: 'clientId', message: 'Client ID:' },
          { type: 'password', name: 'clientSecret', message: 'Client Secret:', mask: '*' },
          { type: 'password', name: 'accessToken', message: 'Access Token:', mask: '*' },
        ]);
        config.platforms.linkedin = linkedinAnswers;
      }

      if (platform === 'instagram') {
        const instagramAnswers = await inquirer.prompt([
          { type: 'password', name: 'accessToken', message: 'Access Token:', mask: '*' },
          { type: 'input', name: 'businessAccountId', message: 'Business Account ID:' },
        ]);
        config.platforms.instagram = instagramAnswers;
      }
    }

    await configManager.save(config);
    console.log(chalk.green('\n✅ Configuration saved successfully!\n'));
  });

// ================== Deploy Command ==================

program
  .command('deploy')
  .description('Deploy automation to production')
  .option('-e, --env <environment>', 'deployment environment', 'production')
  .action(async (options) => {
    const spinner = ora('Preparing deployment...').start();

    try {
      const config = await configManager.load();
      
      // Validate configuration
      if (!config.supabaseUrl || !config.supabaseKey) {
        spinner.fail('Missing Supabase configuration. Run "setup" first.');
        return;
      }

      spinner.text = 'Running database migrations...';
      await runDatabaseMigrations(config);

      spinner.text = 'Building production bundle...';
      await execAsync('npm run build');

      spinner.text = 'Deploying edge functions...';
      await deployEdgeFunctions(config);

      spinner.text = 'Setting up cron jobs...';
      await setupCronJobs(config);

      spinner.succeed('Deployment completed successfully!');
      
      console.log(chalk.cyan('\n📊 Deployment Summary:'));
      console.log(chalk.gray('  Environment:'), options.env);
      console.log(chalk.gray('  Database:'), 'Migrated');
      console.log(chalk.gray('  Edge Functions:'), 'Deployed');
      console.log(chalk.gray('  Cron Jobs:'), 'Active');
      
    } catch (error) {
      spinner.fail('Deployment failed');
      console.error(chalk.red('Error:'), error);
      process.exit(1);
    }
  });

// ================== Monitor Command ==================

program
  .command('monitor')
  .description('Monitor automation in real-time')
  .option('-f, --follow', 'follow log output')
  .action(async (options) => {
    const config = await configManager.load();
    
    if (!config.supabaseUrl || !config.supabaseKey) {
      console.error(chalk.red('Missing configuration. Run "setup" first.'));
      return;
    }

    const supabase = createClient(config.supabaseUrl, config.supabaseKey);
    
    console.log(chalk.cyan('📊 Social Media Automation Monitor\n'));
    
    // Display stats
    const stats = await getSystemStats(supabase);
    displayStats(stats);

    if (options.follow) {
      console.log(chalk.yellow('\n📜 Following logs (Ctrl+C to exit)...\n'));
      
      // Subscribe to real-time updates
      const channel = supabase
        .channel('system-logs')
        .on('postgres_changes', 
          { event: '*', schema: 'public', table: 'automation_logs' },
          (payload) => {
            displayLogEntry(payload.new);
          }
        )
        .subscribe();

      // Keep process alive
      process.stdin.resume();
    }
  });

// ================== Research Command ==================

program
  .command('research <topic>')
  .description('Run research on a specific topic')
  .option('-s, --sources <sources>', 'comma-separated list of sources', 'perplexity,reddit,twitter')
  .action(async (topic, options) => {
    const spinner = ora('Starting research...').start();
    
    try {
      const config = await configManager.load();
      const supabase = createClient(config.supabaseUrl!, config.supabaseKey!);
      
      spinner.text = `Researching "${topic}"...`;
      
      // Simulate research process (replace with actual implementation)
      const sources = options.sources.split(',');
      const results = [];
      
      for (const source of sources) {
        spinner.text = `Searching ${source}...`;
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        results.push({
          source,
          findings: `Sample findings from ${source} about ${topic}`,
          relevance: Math.random(),
        });
      }
      
      spinner.succeed('Research completed!');
      
      console.log(chalk.cyan('\n📚 Research Results:\n'));
      results.forEach(result => {
        console.log(chalk.yellow(`${result.source}:`));
        console.log(chalk.gray(`  ${result.findings}`));
        console.log(chalk.gray(`  Relevance: ${(result.relevance * 100).toFixed(1)}%\n`));
      });
      
      // Save to database
      const { error } = await supabase.from('research_data').insert({
        topic,
        sources: results,
        created_at: new Date().toISOString(),
      });
      
      if (error) {
        console.error(chalk.red('Failed to save research:'), error);
      }
      
    } catch (error) {
      spinner.fail('Research failed');
      console.error(chalk.red('Error:'), error);
    }
  });

// ================== Generate Command ==================

program
  .command('generate')
  .description('Generate content based on latest research')
  .option('-p, --platform <platform>', 'target platform', 'all')
  .option('-n, --number <number>', 'number of posts to generate', '5')
  .action(async (options) => {
    const spinner = ora('Generating content...').start();
    
    try {
      const config = await configManager.load();
      const supabase = createClient(config.supabaseUrl!, config.supabaseKey!);
      
      // Fetch latest research
      spinner.text = 'Fetching latest research...';
      const { data: research } = await supabase
        .from('research_data')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(10);
      
      if (!research || research.length === 0) {
        spinner.fail('No research data found. Run "research" command first.');
        return;
      }
      
      spinner.text = 'Generating content variations...';
      const posts = [];
      
      for (let i = 0; i < parseInt(options.number); i++) {
        // Simulate content generation
        await new Promise(resolve => setTimeout(resolve, 500));
        
        posts.push({
          platform: options.platform,
          content: `Generated post ${i + 1} based on research`,
          hashtags: ['#automation', '#socialmedia', '#ai'],
          scheduled_for: new Date(Date.now() + (i * 3600000)).toISOString(),
        });
      }
      
      spinner.succeed(`Generated ${posts.length} posts!`);
      
      console.log(chalk.cyan('\n📝 Generated Content:\n'));
      posts.forEach((post, index) => {
        console.log(chalk.yellow(`Post ${index + 1}:`));
        console.log(chalk.gray(`  ${post.content}`));
        console.log(chalk.gray(`  Tags: ${post.hashtags.join(' ')}`));
        console.log(chalk.gray(`  Scheduled: ${new Date(post.scheduled_for).toLocaleString()}\n`));
      });
      
      // Save to database
      const { error } = await supabase.from('content_queue').insert(posts);
      
      if (error) {
        console.error(chalk.red('Failed to save content:'), error);
      }
      
    } catch (error) {
      spinner.fail('Content generation failed');
      console.error(chalk.red('Error:'), error);
    }
  });

// ================== Status Command ==================

program
  .command('status')
  .description('Show system status and health')
  .action(async () => {
    const config = await configManager.load();
    
    if (!config.supabaseUrl || !config.supabaseKey) {
      console.error(chalk.red('System not configured. Run "setup" first.'));
      return;
    }
    
    const supabase = createClient(config.supabaseUrl, config.supabaseKey);
    
    console.log(chalk.cyan('\n🔍 System Status\n'));
    
    // Check services
    const services = [
      { name: 'Supabase', status: await checkSupabase(supabase) },
      { name: 'OpenAI', status: config.openaiKey ? 'configured' : 'not configured' },
      { name: 'Claude', status: config.claudeKey ? 'configured' : 'not configured' },
      { name: 'Twitter', status: config.platforms.twitter ? 'configured' : 'not configured' },
      { name: 'LinkedIn', status: config.platforms.linkedin ? 'configured' : 'not configured' },
    ];
    
    services.forEach(service => {
      const icon = service.status === 'connected' || service.status === 'configured' ? '✅' : '❌';
      const color = service.status === 'connected' || service.status === 'configured' ? chalk.green : chalk.red;
      console.log(`  ${icon} ${service.name}: ${color(service.status)}`);
    });
    
    // Show queue status
    const { data: queueCount } = await supabase
      .from('content_queue')
      .select('id', { count: 'exact', head: true })
      .eq('status', 'pending');
    
    const { data: publishedCount } = await supabase
      .from('published_content')
      .select('id', { count: 'exact', head: true })
      .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString());
    
    console.log(chalk.cyan('\n📈 Statistics (Last 24h):\n'));
    console.log(`  Pending posts: ${chalk.yellow(queueCount?.count || 0)}`);
    console.log(`  Published posts: ${chalk.green(publishedCount?.count || 0)}`);
  });

// ================== Helper Functions ==================

async function runDatabaseMigrations(config: CLIConfig): Promise<void> {
  const supabase = createClient(config.supabaseUrl!, config.supabaseKey!);
  
  // Create tables if they don't exist
  const migrations = [
    `CREATE TABLE IF NOT EXISTS research_data (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      topic TEXT NOT NULL,
      sources JSONB,
      created_at TIMESTAMP DEFAULT NOW()
    )`,
    `CREATE TABLE IF NOT EXISTS content_queue (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      platform TEXT NOT NULL,
      content TEXT NOT NULL,
      hashtags TEXT[],
      scheduled_for TIMESTAMP,
      status TEXT DEFAULT 'pending',
      created_at TIMESTAMP DEFAULT NOW()
    )`,
    `CREATE TABLE IF NOT EXISTS published_content (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      platform TEXT NOT NULL,
      content TEXT NOT NULL,
      post_id TEXT,
      metrics JSONB,
      created_at TIMESTAMP DEFAULT NOW()
    )`,
    `CREATE TABLE IF NOT EXISTS automation_logs (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      level TEXT NOT NULL,
      message TEXT NOT NULL,
      metadata JSONB,
      created_at TIMESTAMP DEFAULT NOW()
    )`,
  ];
  
  for (const migration of migrations) {
    await supabase.rpc('exec_sql', { query: migration });
  }
}

async function deployEdgeFunctions(config: CLIConfig): Promise<void> {
  // Deploy to Supabase Edge Functions or Vercel
  await execAsync('supabase functions deploy');
}

async function setupCronJobs(config: CLIConfig): Promise<void> {
  // Setup cron jobs for automated tasks
  cron.schedule(config.scheduling.researchInterval, async () => {
    console.log('Running scheduled research...');
    // Trigger research automation
  });
  
  config.scheduling.postingSchedule.forEach(time => {
    const [hour, minute] = time.split(':');
    cron.schedule(`${minute} ${hour} * * *`, async () => {
      console.log(`Running scheduled posting at ${time}...`);
      // Trigger posting automation
    });
  });
}

async function getSystemStats(supabase: any): Promise<any> {
  const [queue, published, logs] = await Promise.all([
    supabase.from('content_queue').select('*', { count: 'exact', head: true }),
    supabase.from('published_content').select('*', { count: 'exact', head: true }),
    supabase.from('automation_logs').select('*').order('created_at', { ascending: false }).limit(10),
  ]);
  
  return { queue, published, logs };
}

function displayStats(stats: any): void {
  console.log(chalk.gray('Queue:'), stats.queue?.count || 0, 'pending');
  console.log(chalk.gray('Published:'), stats.published?.count || 0, 'total');
  console.log(chalk.gray('Recent activity:'), stats.logs?.data?.length || 0, 'events');
}

function displayLogEntry(entry: any): void {
  const timestamp = new Date(entry.created_at).toLocaleTimeString();
  const levelColor = entry.level === 'error' ? chalk.red : 
                     entry.level === 'warning' ? chalk.yellow : 
                     chalk.gray;
  
  console.log(`[${timestamp}] ${levelColor(entry.level.toUpperCase())} ${entry.message}`);
}

async function checkSupabase(supabase: any): Promise<string> {
  try {
    const { error } = await supabase.from('automation_logs').select('id').limit(1);
    return error ? 'error' : 'connected';
  } catch {
    return 'disconnected';
  }
}

// ================== Main Program ==================

program
  .name('social-auto')
  .description('CLI for Social Media Research & Content Automation')
  .version('1.0.0');

program.parse(process.argv);

// Show help if no command provided
if (!process.argv.slice(2).length) {
  program.outputHelp();
}
</artifact>

Now let me create the package.json and setup scripts for the CLI:

<artifact identifier="cli-package" type="application/vnd.ant.code" language="json" title="CLI Package Configuration">
{
  "name": "@social-automation/cli",
  "version": "1.0.0",
  "description": "CLI tools for social media automation system",
  "main": "dist/index.js",
  "bin": {
    "social-auto": "./dist/index.js"
  },
  "scripts": {
    "build": "tsc",
    "dev": "ts-node src/index.ts",
    "link": "npm link",
    "unlink": "npm unlink",
    "test": "jest",
    "lint": "eslint src/**/*.ts",
    "format": "prettier --write src/**/*.ts"
  },
  "dependencies": {
    "commander": "^11.1.0",
    "chalk": "^4.1.2",
    "inquirer": "^8.2.6",
    "ora": "^5.4.1",
    "dotenv": "^16.3.1",
    "@supabase/supabase-js": "^2.39.3",
    "node-cron": "^3.0.3",
    "fs-extra": "^11.2.0",
    "axios": "^1.6.5",
    "table": "^6.8.1",
    "figlet": "^1.7.0",
    "boxen": "^5.1.2"
  },
  "devDependencies": {
    "@types/node": "^20.10.6",
    "@types/inquirer": "^9.0.7",
    "@types/node-cron": "^3.0.11",
    "@types/fs-extra": "^11.0.4",
    "@types/figlet": "^1.5.8",
    "typescript": "^5.3.3",
    "ts-node": "^10.9.2",
    "@typescript-eslint/eslint-plugin": "^6.17.0",
    "@typescript-eslint/parser": "^6.17.0",
    "eslint": "^8.56.0",
    "prettier": "^3.1.1",
    "jest": "^29.7.0",
    "@types/jest": "^29.5.11"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}
</artifact>

Now let's create the setup and installation script:

<artifact identifier="cli-setup-script" type="application/vnd.ant.code" language="bash" title="CLI Setup and Installation Script">
#!/bin/bash

# Social Media Automation CLI Setup Script
# This script sets up the CLI tools for the social media automation system

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# ASCII Art Banner
echo -e "${BLUE}"
cat << "EOF"
╔════════════════════════════════════════════════╗
║   Social Media Automation CLI Setup            ║
║   Version 1.0.0                                ║
╚════════════════════════════════════════════════╝
EOF
echo -e "${NC}"

# Check prerequisites
print_status "Checking prerequisites..."

# Check Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js is not installed. Please install Node.js 18+ first."
    exit 1
fi

NODE_VERSION=$(node -v | cut -d 'v' -f 2 | cut -d '.' -f 1)
if [ "$NODE_VERSION" -lt 18 ]; then
    print_error "Node.js version 18+ is required. Current version: $(node -v)"
    exit 1
fi
print_success "Node.js $(node -v) detected"

# Check npm
if ! command -v npm &> /dev/null; then
    print_error "npm is not installed."
    exit 1
fi
print_success "npm $(npm -v) detected"

# Check git
if ! command -v git &> /dev/null; then
    print_warning "Git is not installed. Some features may not work."
fi

# Create project directory
PROJECT_DIR="$HOME/DevOps/social-automation-cli"
print_status "Setting up project in $PROJECT_DIR"

mkdir -p "$PROJECT_DIR"
cd "$PROJECT_DIR"

# Initialize project if not already initialized
if [ ! -f "package.json" ]; then
    print_status "Initializing project..."
    npm init -y > /dev/null 2>&1
fi

# Copy CLI files
print_status "Setting up CLI files..."

# Create src directory
mkdir -p src

# Create the main CLI file
cat > src/index.ts << 'ENDOFCLI'
# [Insert the CLI main code here from the artifact above]
ENDOFCLI

# Create TypeScript config
cat > tsconfig.json << 'ENDOFTS'
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "commonjs",
    "lib": ["ES2022"],
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "**/*.test.ts"]
}
ENDOFTS

# Create .env.example
cat > .env.example << 'ENDOFENV'
# Supabase Configuration
SUPABASE_URL=your_supabase_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# AI Providers
OPENAI_API_KEY=your_openai_key
CLAUDE_API_KEY=your_claude_key
PERPLEXITY_API_KEY=your_perplexity_key

# Social Media Platforms
TWITTER_API_KEY=your_twitter_api_key
TWITTER_API_SECRET=your_twitter_api_secret
TWITTER_ACCESS_TOKEN=your_twitter_access_token
TWITTER_ACCESS_SECRET=your_twitter_access_secret

LINKEDIN_CLIENT_ID=your_linkedin_client_id
LINKEDIN_CLIENT_SECRET=your_linkedin_client_secret
LINKEDIN_ACCESS_TOKEN=your_linkedin_access_token

INSTAGRAM_ACCESS_TOKEN=your_instagram_access_token
INSTAGRAM_BUSINESS_ACCOUNT_ID=your_instagram_business_id
ENDOFENV

# Install dependencies
print_status "Installing dependencies..."
npm install commander chalk inquirer ora dotenv @supabase/supabase-js node-cron fs-extra axios table figlet boxen

print_status "Installing dev dependencies..."
npm install -D typescript ts-node @types/node @types/inquirer @types/node-cron @types/fs-extra @types/figlet eslint prettier jest @types/jest

# Build the CLI
print_status "Building CLI..."
npm run build

# Create global link
print_status "Creating global CLI link..."
npm link

print_success "CLI setup complete!"

echo ""
echo "Available commands:"
echo "  social-auto setup     - Run interactive setup wizard"
echo "  social-auto deploy    - Deploy automation to production"
echo "  social-auto monitor   - Monitor automation in real-time"
echo "  social-auto research  - Run research on a topic"
echo "  social-auto generate  - Generate content"
echo "  social-auto status    - Show system status"
echo "  social-auto --help    - Show all commands"

echo ""
print_status "Next steps:"
echo "  1. Run 'social-auto setup' to configure your credentials"
echo "  2. Run 'social-auto deploy' to deploy the automation"
echo "  3. Run 'social-auto monitor -f' to watch real-time logs"
</artifact>

## 📋 Next Steps to Complete CLI Setup

Now that we have the CLI tools created, here's what you need to do:

### 1. **Install the CLI on your system:**

```bash
# Navigate to your project directory
cd ~/DevOps/social-automation-cli

# Make the setup script executable
chmod +x setup.sh

# Run the setup script
./setup.sh
```

### 2. **Configure your credentials:**

```bash
# Run the interactive setup wizard
social-auto setup
```

### 3. **Test the CLI commands:**

```bash
# Check system status
social-auto status

# Run a test research
social-auto research "AI trends in 2025"

# Generate sample content
social-auto generate --platform twitter --number 3

# Monitor the system
social-auto monitor
```

### 4. **Deploy to production:**

```bash
# Deploy the full system
social-auto deploy --env production
```

## 🔧 Additional CLI Features to Add

Would you like me to create additional CLI commands for:

1. **Backup and restore** - Database backup/restore functionality
2. **Analytics export** - Export performance metrics to CSV/JSON
3. **Batch operations** - Bulk content management
4. **Template management** - Create and manage content templates
5. **Webhook configuration** - Setup webhook endpoints for external integrations

Let me know which features you'd like to implement next, or if you want to move on to creating the **React Dashboard** (item #2 from our original plan).